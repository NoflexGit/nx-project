generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  email      String            @unique
  password   String
  phone      String?
  avatar     String?
  name       String
  address    String?
  createdAt  DateTime          @default(now())
  role       Role              @default(TENANT)
  properties Property[]
  reviews    Review[]
  orders     Order[]
  favorites  Favorite[]
  messages   Message[]
  chats      ChatParticipant[]

  @@map("users")
}

model Property {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  address    String
  city       String
  previewImg String?
  createdAt  DateTime         @default(now())
  type       PropertyType     @default(APARTMENTS)
  details    PropertyDetails?
  agent      User?            @relation(fields: [agentId], references: [id])
  agentId    String?          @map("agent_id") @db.ObjectId
  reviews    Review[]
  orders     Order[]
  favorite   Favorite?        @relation(fields: [favoriteId], references: [id])
  favoriteId String?          @db.ObjectId
  tags       Tag[]

  @@map("properties")
}

model PropertyDetails {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String   @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rooms       Int?
  bathrooms   Int?
  area        Int?
  price       Int?
  description String?
  images      String[]
  latitude    Float?
  longitude   Float?

  @@map("propertyDetails")
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @db.ObjectId
  createdAt  DateTime @default(now())
  rating     Float
  comment    String?
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  @@map("reviews")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  property   Property    @relation(fields: [propertyId], references: [id])
  propertyId String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  status     OrderStatus @default(PENDING)

  @@map("orders")
}

model Favorite {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  property  Property[]
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId

  @@map("favorites")
}

model Tag {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  name       String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @db.ObjectId

  @@map("tags")
}

model ChatParticipant {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @db.ObjectId
  chat                 Chat     @relation(fields: [chatId], references: [id])
  chatId               String   @db.ObjectId
  hasSeenLatestMessage Boolean  @default(false)

  @@map("chatParticipants")
}

model Chat {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  messages     Message[]
  participants ChatParticipant[]

  @@map("chats")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String?
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId

  @@map("messages")
}

enum PropertyType {
  APARTMENTS
  HOUSE
  COMMERCIAL
}

enum Role {
  LANDLORD
  ADMIN
  AGENT
  TENANT
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
}
